#pragma kernel CSMain
#include "/Includes/HLSL_Noise/ClassicNoise3D.hlsl"

static const int numThreads = 8;


RWStructuredBuffer<float4> voxels; //buffer of voxels (a coordinate + float value)

int resolution;
float vS;
float tfx;
float tfy;
float tfz;

int indexFromCoord(int x, int y, int z) {
    return z * resolution * resolution + y * resolution + x;
}

[numthreads(numThreads, numThreads, numThreads)]
void CSMain (int3 id : SV_DispatchThreadID)
{
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= resolution || id.y >= resolution || id.z >= resolution) {
        return;
    }
    float3 tfL = { tfx, tfy, tfz };
    int ysave = id.y;
    
    float density = -ysave;
    density += cnoise(id.xyz + tfL);
    density += cnoise(id.xyz + tfL * 2) * 0.5;
    int i = indexFromCoord(id.x, id.y, id.z);
    float4 newVox = {(id.x + 0.5) * vS, (id.y + 0.5) * vS,  (id.z + 0.5) * vS, density };
    voxels[i] = newVox;
}
