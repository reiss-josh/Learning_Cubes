#pragma kernel Density
#include "/Includes/HLSL_Noise/ClassicNoise3D.hlsl"
//#include "/Includes/GLSL_Noise.compute"
static const int numThreads = 8;


RWStructuredBuffer<float4> voxels; //buffer of voxels (a coordinate + float value)

int voxRes;
//float voxMid;
float vS;
float tfx;
float tfy;
float tfz;

int indexFromCoord(int x, int y, int z) {
    return z * voxRes * voxRes + y * voxRes + x;
}

[numthreads(numThreads, numThreads, numThreads)]
void Density(int3 id : SV_DispatchThreadID)
{
	if (id.x >= voxRes || id.y >= voxRes || id.z >= voxRes) {
		return;
	}
	double vSize = vS / 10;
	//double3 tfL = { tfx/10, tfy/10, tfz/10 };
	//double3 voxCenterCorrection = { voxMid - 0.5f, voxMid - 0.5f, voxMid - 0.5f };
	//double3 chunkCenterCorrection = { 0,0,0}; //not implemented
	double3 ws = (id) * vSize;
	double density = 0;
	density += cnoise(ws.xyz);
	//density = snoise(ws.xyz);
	
	int i = indexFromCoord(id.x, id.y, id.z);
	voxels[i].x = (ws.x);
	voxels[i].y = (ws.y);
	voxels[i].z = (ws.z);
	voxels[i].w = density;
}