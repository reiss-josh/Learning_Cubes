#pragma kernel Density
#include "/Includes/HLSL_Noise/ClassicNoise3D.hlsl"

static const int numThreads = 8;


RWStructuredBuffer<float4> voxels; //buffer of voxels (a coordinate + float value)

int resolution;
float vS;
float tfx;
float tfy;
float tfz;

int indexFromCoord(int x, int y, int z) {
    return z * resolution * resolution + y * resolution + x;
}

[numthreads(numThreads, numThreads, numThreads)]
void Density(int3 id : SV_DispatchThreadID)
{
	if (id.x >= resolution || id.y >= resolution || id.z >= resolution) {
		return;
	}
	double3 tfL = { tfx/10, tfy/10, tfz/10 };
	double3 ws = tfL + id.xyz;
	double density = -ws.y;
	//density += cnoise(ws);
	//density += cnoise(ws.xyz * 2);
	
	double vSize = vS / 10;
	int i = indexFromCoord(id.x, id.y, id.z);
	voxels[i].x = (id.x+0.5)*vSize;
	voxels[i].y = (id.y+0.5)*vSize;
	voxels[i].z = (id.z+0.5)*vSize;
	voxels[i].w = density;
}