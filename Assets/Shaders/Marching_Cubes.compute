#pragma kernel March
#include "/Includes/MarchTables.compute"

static const int numThreads = 8;

struct Triangle {
    float3 vertA;
    float3 vertB;
    float3 vertC;
};

AppendStructuredBuffer<Triangle> tris; //a compute buffer to dump all our Triangle structs into
RWStructuredBuffer<float4> voxels; //buffer of voxels (a coordinate + float value)

int resolution;
float isoLevel;
float vHSize;

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + 0.5 * (v2.xyz - v1.xyz);
}

int indexFromCoord(int x, int y, int z) {
    return z * resolution * resolution + y * resolution + x;
}

[numthreads(numThreads, numThreads, numThreads)]
void March(int3 id : SV_DispatchThreadID)
{
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= resolution - 1 || id.y >= resolution - 1 || id.z >= resolution - 1) {
        return;
    }

    // 8 corners of the current cube
    float4 CubeVerts[8] = {
        voxels[indexFromCoord(id.x, id.y, id.z)],
        voxels[indexFromCoord(id.x + 1, id.y, id.z)],
        voxels[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        voxels[indexFromCoord(id.x, id.y, id.z + 1)],
        voxels[indexFromCoord(id.x, id.y + 1, id.z)],
        voxels[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        voxels[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        voxels[indexFromCoord(id.x, id.y + 1, id.z + 1)]
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (CubeVerts[0].w < isoLevel) cubeIndex |= 1;
    if (CubeVerts[1].w < isoLevel) cubeIndex |= 2;
    if (CubeVerts[2].w < isoLevel) cubeIndex |= 4;
    if (CubeVerts[3].w < isoLevel) cubeIndex |= 8;
    if (CubeVerts[4].w < isoLevel) cubeIndex |= 16;
    if (CubeVerts[5].w < isoLevel) cubeIndex |= 32;
    if (CubeVerts[6].w < isoLevel) cubeIndex |= 64;
    if (CubeVerts[7].w < isoLevel) cubeIndex |= 128;

    // Create triangles for current cube configuration

    for (int i = 0; triTable[cubeIndex][i] != -1; i += 3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triTable[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triTable[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triTable[cubeIndex][i + 1]];
        int b1 = cornerIndexBFromEdge[triTable[cubeIndex][i + 1]];

        int a2 = cornerIndexAFromEdge[triTable[cubeIndex][i + 2]];
        int b2 = cornerIndexBFromEdge[triTable[cubeIndex][i + 2]];

        Triangle tri;
        tri.vertA = interpolateVerts(CubeVerts[a0], CubeVerts[b0]);
        tri.vertB = interpolateVerts(CubeVerts[a1], CubeVerts[b1]);
        tri.vertC = interpolateVerts(CubeVerts[a2], CubeVerts[b2]);
        tris.Append(tri);
    }


}
